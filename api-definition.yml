openapi: 3.0.0
info:
  description: API definition for the CDA
  version: 1.0.0
  title: CDA API
  contact:
    email: kaushik.ghose@sevenbridges.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admin
    description: Calls meant for administrative tasks 
  - name: meta
    description: Retrieve meta information about CDA data or CDA itself
  - name: data
    description: Retrieve the data stored in the CDA.

paths:
  /about:
    get:
      tags:
        - meta
      summary: Brief information about the CDA
      operationId: about
      description: |
        Return information about the CDA repository
      responses:
        '200':
          description: CDA information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/about'    
                      
        '400':
          description: CDA service unavailable        

  /status:
    get:
      tags:
        - meta
      summary: Current CDA service status
      operationId: status
      description: |
        Return a succinct string indicating current CDA status
      responses:
        '200':
          description: CDA status
          content:
            text/plain:
              schema:
                type: string
                enum: [active, maintenance, overloaded]

  /columns:
    get:
      tags:
        - meta
      summary: Column names and descriptions
      operationId: columns
      description: |
        List of column names and brief description and notes about them
      responses:
        '200':
          description: CDA information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/columns-meta'    

  /query/synchronous/{resultMode}:
    post:
      tags:
        - data
      summary: Start query
      operationId: querySynchronous
      description: |
        Setup a query and block until the results are ready, then return results. 

      parameters:

        - in: path
          name: resultMode
          description: |
            Format of returned rows:              
            - bigquery: return as bigquery tables 
            - json: return as JSON
            - tsv: return as a table in TSV
          required: true
          schema:
            type: string
            enum: [bigquery, json, tsv]

      requestBody:
        description: |
          The query S-expression and any pagination instructions
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  $ref: '#/components/schemas/Query'
                offset:
                  type: integer
                limit:
                  type: integer
                sort:
                  type: array
                  items: 
                    $ref: '#/components/schemas/QuerySort' 
                      
      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'

  /query/asynchronous:
    post:
      tags:
        - data
      summary: Start query
      operationId: queryAsynchronous
      description: |
        Start a query but don't block. Return just queryid. 

      requestBody:
        description: |
          The query S-expression
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
                      
      responses:
        '200':
          description: Just the query id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryId'

  /query/summary:
    post:
      tags:
        - data
      summary: Start query
      operationId: querySummary
      description: |
        Setup a query and block until the results are ready, then only return result summary. 

      requestBody:
        description: |
          The query S-expression
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
                      
      responses:
        '200':
          description: Just the result summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultSummary'

  /query/analyze:
    post:
      tags:
        - data
      summary: Return time/cost/size analysis of query
      operationId: queryAnalyze
      description: |
        Register a query and return a time/cost/size analysis of the query. Return just queryid. 

      requestBody:
        description: |
          The query S-expression.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
                      
      responses:
        '200':
          description: Just the query id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAnalysis'

  /query/register:
    post:
      tags:
        - data
      summary: Register query
      operationId: queryAsynchronous
      description: |
        Register the query but do not run it or analyze it. This is in
        preparation for constructing a future, larger, query from pieces.

      requestBody:
        description: |
          The query S-expression
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
                      
      responses:
        '200':
          description: Just the query id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryId'

  /query/status/{uuid}:
    get:
      tags:
        - data
      summary: Status of query
      operationId: queryStatus
      description: |
        Return a succinct string indicating status of a query
      parameters:
        - in: path
          name: uuid
          schema:
            $ref: '#/components/schemas/QueryId'
          required: true

      responses:
        '200':
          description: Query status
          content:
            text/plain:
              schema:
                type: string
                enum: [nosuchquery, registered, running, complete, error]

  /query/result/{uuid}/{resultMode}:
    get:
      tags:
        - data
      summary: Fetch result of submitted query
      operationId: queryResult
      description: |
        Fetch result of submitted query. Used for asynchronous calls.
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
            format: uuid
          required: true

      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'


  /query/object/{uuid}:
    get:
      tags:
        - data
      summary: Query object
      operationId: queryObject
      description: |
        Return a JSON with the query object corresponding to this uuid
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: Query object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'


servers:
  - url: 'https://virtserver.swaggerhub.com/CDA/1.0.0'
components:
  schemas:

    about:
      type: object
      properties:
        version:
          type: string
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/dataset-meta'

    dataset-meta:
      type: object
      properties:
        name: 
          type: string
        version:
          type: string
        lastUpdate:
          type: string
          format: date-time

    columns-meta:
      type: object
      properties:
        version:
          type: string
        description:
          type: string
        lastUpdate:
          type: string
          format: date-time
        columns:
          type: array
          items:
            type: object
            properties:
              name: 
                type: string
              description:
                type: string

    Query:
      type: object
      required:
        - format
      properties:
        format:
          $ref: '#/components/schemas/query-format'
        query:
          oneOf:
            - $ref: '#/components/schemas/QueryNode'
            - $ref: '#/components/schemas/FHIRQuery'

    query-format:
      description: Query format
      type: string
      enum: [fhir, sql]

    QueryNode:
      type: object
      properties:
        operator:
          type: string
          enum: ["<", ">", "=", "~", "AND", "OR", "NOT"]
        l:
          $ref: '#/components/schemas/QueryLeaf' 
        r:
          $ref: '#/components/schemas/QueryLeaf' 

    QueryLeaf:
      oneOf:
        - type: string
        - type: integer
        - type: number
        - $ref: '#/components/schemas/QueryId' 
        - $ref: '#/components/schemas/QueryColumn' 
        - $ref: '#/components/schemas/QueryNode'

    QueryId:
      type: string
      format: uuid

    QueryColumn:
      type: object
      properties:
        namespace:
          type: string
        table:
          type: string
        column:
          type: string

    FHIRQuery:
      type: object
      
    QuerySort:
      type: object
      properties:
        column:
          $ref: '#/components/schemas/QueryColumn'
        order:
          type: string
          enum: [asc, desc]

    Result:
      type: object
      required:
        - queryid
      properties:
        queryid:
          $ref: '#/components/schemas/QueryId'
        summary:
          type: object
        analysis:
          type: object
        result:
          type: object
